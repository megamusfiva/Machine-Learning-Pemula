# -*- coding: utf-8 -*-
"""Dicoding_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jgCKMC7FKNU0WbldfpIIL3Xloi_APSZf

### **DICODING MACHINE LEARNING ASSIGNMENT**
"""

!wget https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip

import tensorflow as tf
assert tf.__version__.startswith('2')
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os
import numpy as np
import matplotlib.pyplot as plt

tf.__version__

#Unzip
import zipfile

local_zip= '/content/rockpaperscissors.zip'
zip_ref= zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/')
zip_ref.close()

#local_zip = '/tmp/rps-test-set.zip'
#zip_ref = zipfile.ZipFile(local_zip, 'r')
#zip_ref.extractall('/tmp/')
#zip_ref.close()

#Look list file
!ls /content/
!ls /content/rockpaperscissors/

#remove 2 file
!rm -rf /content/rockpaperscissors/README_rpc-cv-images.txt
!rm -rf /content/rockpaperscissors/rps-cv-images
!ls /content/rockpaperscissors/

rock_dir = os.path.join('/content/rockpaperscissors/rock')
paper_dir = os.path.join('/content/rockpaperscissors/paper')
scissors_dir = os.path.join('/content/rockpaperscissors/scissors')

print('total training rock images:', len(os.listdir(rock_dir)))
print('total training paper images:', len(os.listdir(paper_dir)))
print('total training scissors images:', len(os.listdir(scissors_dir)))

rock_files = os.listdir(rock_dir)
print(rock_files[:10])

paper_files = os.listdir(paper_dir)
print(paper_files[:10])

scissors_files = os.listdir(scissors_dir)
print(scissors_files[:10])

# Commented out IPython magic to ensure Python compatibility.
#Show image
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

pic_index = 2

next_rock = [os.path.join(rock_dir, fname)
                for fname in rock_files[pic_index-2:pic_index]]
next_paper = [os.path.join(paper_dir, fname)
                for fname in paper_files[pic_index-2:pic_index]]
next_scissors = [os.path.join(paper_dir, fname)
                    for fname in paper_files[pic_index-2:pic_index]]

for i, img_path in enumerate(next_rock+next_paper+next_scissors):
  img = mpimg.imread(img_path)
  plt.imshow(img)
  plt.axis('Off')
  plt.show()

import tensorflow as tf
import keras_preprocessing
from keras_preprocessing import image
from keras_preprocessing.image import ImageDataGenerator

image_dir= '/content/rockpaperscissors/'
training_datagen =ImageDataGenerator (
      rescale = 1./255,
      rotation_range = 40,
      width_shift_range = 0.2,
      shear_range = 0.2,
      zoom_range = 0.2,
      horizontal_flip= True,
      fill_mode='nearest',
      validation_split=0.2)

train_generator = training_datagen.flow_from_directory(
    image_dir,
    target_size= (100,150),
    class_mode='categorical',
    shuffle=True,
    #batch_size = 126
    subset='training'
)

validation_generator = training_datagen.flow_from_directory(
    image_dir,
    target_size=(100,150),
    class_mode='categorical',
    #batch_size=126
    subset='validation'
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32,(3,3),activation='relu', input_shape=(100, 150, 3)),
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Conv2D(64,(3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128,(3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),

    tf.keras.layers.Dense(512,activation='relu'),
    tf.keras.layers.Dense(3,activation='softmax')
])
    
model.summary()
model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
history= model.fit(train_generator,epochs=20, steps_per_epoch=25, validation_data= validation_generator, verbose=1, validation_steps=3)
model.save("rps.h5")

def plot_graphs(history, metric):
  plt.plot(history.history[metric])
  plt.plot(history.history['val_'+metric], '')
  plt.xlabel("Epochs")
  plt.ylabel(metric)
  plt.legend([metric, 'val_'+metric])
  plt.show()
  
plot_graphs(history, 'accuracy')
plot_graphs(history, 'loss')

import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():

  path=fn
  img=image.load_img(path,target_size=(100,150))
  imgplot = plt.imshow(img)
  x= image.img_to_array(img)
  x=np.expand_dims(x,axis=0)

  images = np.vstack([x])
  classes = model.predict(images,batch_size=10)
  print(fn)
  if classes[0][0]==1:
    print('paper')
  elif classes[0][1]==1:
    print('rock')
  elif classes[0][2]==1:
    print('scissors')
  else:
    print('unknown')